---
import '../../styles/flags.css';
import { getSortedCountries, getPhoneValidationInfo } from '../../data/countries.js';

// Props
const {
  type = 'text',
  label = '',
  placeholder = '',
  hint = '',
  error = false,
  disabled = false,
  value = '',
  countryCode = '+506',
  onInput = () => {},
  onCountryChange = () => {},
  name = '',
  id = '',
} = Astro.props;

const inputId = id || `input-${Math.random().toString(36).slice(2, 8)}`;

// Obtener países ordenados
const countryOptions = getSortedCountries();

// Encontrar el país seleccionado por defecto (Costa Rica)
const selectedCountry = countryOptions.find(country => `+${country.dialCode}` === countryCode) || countryOptions[0];

// Obtener información de validación para el país seleccionado
const phoneValidationInfo = getPhoneValidationInfo(selectedCountry.iso2);

// Placeholder dinámico para teléfonos
const dynamicPlaceholder = type === 'tel' ? phoneValidationInfo.placeholder : placeholder;
---

<div class="w-full">
  {label && (
    <label for={inputId} class="block text-sm mb-1 text-gray-300 font-medium">
      {label}
    </label>
  )}
  <div class={
    `flex items-center border-b transition-colors bg-transparent ` +
    (error
      ? 'border-red-500 focus-within:border-red-500'
      : disabled
        ? 'border-gray-600'
        : 'border-gray-400 focus-within:border-white')
  }>
    {type === 'tel' && (
      <div class="relative">
        <!-- Select personalizado con bandera -->
        <div 
          class="country-select-trigger flex items-center gap-2 px-2 py-2 cursor-pointer hover:bg-gray-700 transition-colors"
          data-country-code={`+${selectedCountry.dialCode}`}
          data-country-iso={selectedCountry.iso2}
        >
          <span class={`iti__flag iti__${selectedCountry.iso2}`}></span>
          <span class="text-white text-sm">+{selectedCountry.dialCode}</span>
          <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </div>
        
        <!-- Dropdown de países -->
        <div class="country-dropdown absolute top-full right-0 mt-1 bg-[#232228] border border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto z-50 hidden">
          {countryOptions.map((opt: any) => (
            <div 
              class="country-option flex items-center gap-3 px-3 py-2 hover:bg-gray-700 cursor-pointer transition-colors"
              data-country-code={`+${opt.dialCode}`}
              data-country-iso={opt.iso2}
            >
              <span class={`iti__flag iti__${opt.iso2}`}></span>
              <span class="text-white text-sm">{opt.name}</span>
              <span class="text-gray-400 text-sm">+{opt.dialCode}</span>
            </div>
          ))}
        </div>
      </div>
    )}
    <input
      id={inputId}
      name={name}
      type={type}
      class={
        `flex-1 bg-transparent text-white placeholder-gray-400 px-2 py-2 outline-none ` +
        (disabled ? 'opacity-60 cursor-not-allowed' : '')
      }
      placeholder={dynamicPlaceholder}
      value={value}
      disabled={disabled}
      aria-invalid={error}
      aria-describedby={hint ? `${inputId}-hint` : undefined}
      autocomplete={type === 'tel' ? 'tel' : 'off'}
    />
  </div>
  {hint && (
    <div
      id={`${inputId}-hint`}
      class={
        `text-xs mt-1 transition-colors ` +
        (error ? 'text-red-500' : 'text-gray-400')
      }
    >
      {hint}
    </div>
  )}
</div>

<script>
  // Información de validación de teléfonos por país
  const phoneValidationInfo = {
    cr: { // Costa Rica
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "81234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    us: { // Estados Unidos
      pattern: /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,
      placeholder: "Número de teléfono",
      example: "5551234567",
      description: "10 dígitos"
    },
    mx: { // México
      pattern: /^[1-9]\d{9}$/,
      placeholder: "Número de teléfono",
      example: "5512345678",
      description: "10 dígitos, comenzando con 1-9"
    },
    es: { // España
      pattern: /^[6-9]\d{8}$/,
      placeholder: "Número de teléfono",
      example: "612345678",
      description: "9 dígitos, comenzando con 6-9"
    },
    ar: { // Argentina
      pattern: /^[1-9]\d{9}$/,
      placeholder: "Número de teléfono",
      example: "1123456789",
      description: "10 dígitos, comenzando con 1-9"
    },
    br: { // Brasil
      pattern: /^[1-9]{2}[0-9]{8,9}$/,
      placeholder: "Número de teléfono",
      example: "11987654321",
      description: "10-11 dígitos"
    },
    co: { // Colombia
      pattern: /^[1-9]\d{9}$/,
      placeholder: "Número de teléfono",
      example: "3001234567",
      description: "10 dígitos, comenzando con 1-9"
    },
    pe: { // Perú
      pattern: /^[1-9]\d{8}$/,
      placeholder: "Número de teléfono",
      example: "912345678",
      description: "9 dígitos, comenzando con 1-9"
    },
    cl: { // Chile
      pattern: /^[2-9]\d{8}$/,
      placeholder: "Número de teléfono",
      example: "912345678",
      description: "9 dígitos, comenzando con 2-9"
    },
    uy: { // Uruguay
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "91234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    py: { // Paraguay
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "91234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    bo: { // Bolivia
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "71234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    ec: { // Ecuador
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "91234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    ve: { // Venezuela
      pattern: /^[2-9]\d{9}$/,
      placeholder: "Número de teléfono",
      example: "4121234567",
      description: "10 dígitos, comenzando con 2-9"
    },
    pa: { // Panamá
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "61234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    ni: { // Nicaragua
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "81234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    hn: { // Honduras
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "91234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    sv: { // El Salvador
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "71234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    gt: { // Guatemala
      pattern: /^[2-9]\d{7}$/,
      placeholder: "Número de teléfono",
      example: "51234567",
      description: "8 dígitos, comenzando con 2-9"
    },
    bz: { // Belice
      pattern: /^[2-9]\d{6}$/,
      placeholder: "Número de teléfono",
      example: "6123456",
      description: "7 dígitos, comenzando con 2-9"
    }
  };

  // Función para obtener información de validación por código ISO
  function getPhoneValidationInfo(iso2: string) {
    return phoneValidationInfo[iso2 as keyof typeof phoneValidationInfo] || {
      pattern: /^\+?[\d\s\-\(\)]{7,}$/,
      placeholder: "Número de teléfono",
      example: "123456789",
      description: "Número de teléfono válido"
    };
  }

  // Función para actualizar placeholder del teléfono
  function updatePhonePlaceholder(trigger: HTMLElement) {
    const countryIso = trigger.getAttribute('data-country-iso');
    if (countryIso) {
      const validationInfo = getPhoneValidationInfo(countryIso);
      const input = trigger.closest('.flex.items-center.border-b')?.querySelector('input[type="tel"]') as HTMLInputElement;
      if (input) {
        input.placeholder = validationInfo.placeholder;
      }
    }
  }

  // Manejar eventos de input y select personalizado
  document.addEventListener('DOMContentLoaded', function() {
    const inputs = document.querySelectorAll('input[type="text"], input[type="tel"], input[type="email"]');
    const countryTriggers = document.querySelectorAll('.country-select-trigger');
    
    // Eventos para inputs
    inputs.forEach(input => {
      input.addEventListener('input', function(e) {
        const target = e.target as HTMLInputElement;
        if (target) {
          const event = new CustomEvent('input-change', {
            detail: { value: target.value, name: target.name }
          });
          document.dispatchEvent(event);
        }
      });
    });
    
    // Eventos para select personalizado de países
    countryTriggers.forEach(trigger => {
      const dropdown = trigger.nextElementSibling as HTMLElement;
      
      // Abrir/cerrar dropdown
      trigger.addEventListener('click', function(e) {
        e.stopPropagation();
        const isOpen = !dropdown.classList.contains('hidden');
        
        // Cerrar todos los dropdowns
        document.querySelectorAll('.country-dropdown').forEach(dd => {
          dd.classList.add('hidden');
        });
        
        // Abrir/cerrar este dropdown
        if (!isOpen) {
          dropdown.classList.remove('hidden');
        }
      });
      
      // Seleccionar país
      dropdown?.addEventListener('click', function(e) {
        const option = (e.target as HTMLElement).closest('.country-option');
        if (option) {
          const countryCode = option.getAttribute('data-country-code');
          const countryIso = option.getAttribute('data-country-iso');
          
          // Actualizar el trigger
          const flagSpan = trigger.querySelector('.iti__flag');
          const codeSpan = trigger.querySelector('span:last-of-type');
          
          if (flagSpan && codeSpan) {
            flagSpan.className = `iti__flag iti__${countryIso}`;
            codeSpan.textContent = countryCode;
          }
          
          // Actualizar atributos
          trigger.setAttribute('data-country-code', countryCode || '');
          trigger.setAttribute('data-country-iso', countryIso || '');
          
          // Actualizar placeholder del teléfono
          updatePhonePlaceholder(trigger as HTMLElement);
          
          // Cerrar dropdown
          dropdown.classList.add('hidden');
          
          // Emitir evento
          const event = new CustomEvent('country-change', {
            detail: { value: countryCode, name: 'telefono' }
          });
          document.dispatchEvent(event);
        }
      });
    });
    
    // Cerrar dropdowns al hacer clic fuera
    document.addEventListener('click', function() {
      document.querySelectorAll('.country-dropdown').forEach(dd => {
        dd.classList.add('hidden');
      });
    });
  });
</script>
